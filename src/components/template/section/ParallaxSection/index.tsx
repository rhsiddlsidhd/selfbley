import { useRef, useState } from "react";
import styled from "styled-components";
import { useMotionValueEvent, useScroll, useTransform } from "motion/react";
import SignSVGContainer from "../../../organism/SignSVGContainer";

import Memo from "../../../atoms/Memo";
import ParallaxImages from "../../../molecules/ParallaxImages";

interface FAQ {
  question: string;
  answer: string;
}

const memoConfig = [
  {
    top: 20,
    left: 1,
  },
  {
    top: 20,
    left: 3,
  },
  { top: 0, left: 1 },
];

const FAQList: FAQ[] = [
  {
    question: "Ïñ¥ÎñªÍ≤å Í∞úÎ∞úÏóê ÏûÖÎ¨∏ÌïòÍ≤å ÎêòÏóàÎäîÍ∞Ä?",
    answer:
      "Ïú†ÌäúÎ∏åÏóêÏÑú Ïõπ Í∞úÎ∞úÏûêÍ∞Ä Î°úÍ∑∏Ïù∏ Í∏∞Îä•ÏùÑ Íµ¨ÌòÑÌïòÎäî ÏòÅÏÉÅÏùÑ Î≥¥Î©∞ ÏΩîÎî©Ïóê Í¥ÄÏã¨ÏùÑ Í∞ÄÏßÄÍ≤å ÎêòÏóàÎã§. Í∑∏Îü¨Ìïú Í¥ÄÏã¨Ïù¥ Ï∂îÌõÑÏóê Î∂ÄÌä∏Ï∫†ÌîÑÎ•º ÏãúÏûëÏúºÎ°ú ÏΩîÎî©Ïù¥ÎùºÎäî ÏÑ∏Í≥ÑÏóê ÏûÖÎ¨∏ÌïòÍ≤å ÎêòÏóàÎã§.",
  },
  {
    question: "Í∞úÎ∞úÏùÑ Î∞∞Ïö∞Í∏∞ ÏúÑÌï¥ Ïñ¥Îñ§ ÎÖ∏Î†•ÏùÑ ÌïòÏòÄÎäîÍ∞Ä?",
    answer:
      "Í∞úÎ∞ú Í¥ÄÎ†® Ï±ÖÎì§ÏùÑ ÎßéÏù¥ Î≥¥Îäî Ìé∏Ïù¥Îã§. Í∏∞Ïà†Ïóê ÎåÄÌïú Í≥µÏãù Î¨∏ÏÑú ÎòêÎäî Î∏îÎ°úÍ∑∏ÎèÑ Ï∞∏Í≥†ÌïòÏßÄÎßå, Í≤ÄÏÉâÏúºÎ°ú Îã®Ìé∏Ï†ÅÏù∏ ÎãµÏùÑ ÏñªÎäî Í≤ÉÎ≥¥Îã§ Ï±ÖÏùÑ ÌÜµÌï¥ ÌùêÎ¶ÑÍ≥º Îß•ÎùΩÏùÑ Ìï®Íªò ÌååÏïÖÌïòÍ≥† Ïù¥Ìï¥ÌïòÎ†§Í≥† ÌïúÎã§",
  },
  {
    question: "Í∞úÎ∞úÏûêÎ°úÏÑú Ïñ¥Îñ§ Í∞ÄÏπòÎ•º Ï§ëÏöîÌïòÍ≤å ÏÉùÍ∞ÅÌïòÎäîÍ∞Ä ?",
    answer:
      "Í∞úÎ∞úÏùÄ ÌïòÎÇòÏùò Î¨∏Ï†úÏóê ÎåÄÌï¥ Îã§ÏñëÌïú ÌíÄÏù¥Í∞Ä Ï°¥Ïû¨ÌïòÎäî Î∂ÑÏïºÎùºÍ≥† ÏÉùÍ∞ÅÌïúÎã§. Ï†ïÌï¥ÏßÑ Ï†ïÎãµÏù¥ ÏûàÎäî Í≤ÉÏù¥ ÏïÑÎãàÎùº, ÎãπÏãúÏùò ÏÉÅÌô©Í≥º Îß•ÎùΩÏóê Îî∞Îùº ÏµúÏÑ†Ïùò Ìï¥Î≤ïÏù¥ Îã¨ÎùºÏßà Îøê, ÏãúÍ∞ÑÏù¥ ÏßÄÎÇòÎ©¥ Îçî ÎÇòÏùÄ Ìï¥Î≤ïÏù¥ Îì±Ïû•ÌïòÍ∏∞ÎèÑ ÌïúÎã§. Ïù¥Ï≤òÎüº Îã§ÏñëÌïú Í¥ÄÏ†êÏù¥ Ï∂©ÎèåÌï† Ïàò ÏûàÎäî ÌôòÍ≤Ω ÏÜçÏóêÏÑú, Ï§ëÏöîÌïú Í∞ÄÏπòÎäî ÏµúÏÑ†ÏùÑ Ï∞æÏïÑÍ∞ÄÎäî ÌòëÏóÖÏùò ÌÉúÎèÑÎùºÍ≥† ÏÉùÍ∞ÅÌïòÍ≥† ÏûàÎã§.",
  },
];

const ParallaxSection = () => {
  const [activeIndex, setActiveIndex] = useState<number>(0);
  const containerRef = useRef<HTMLElement | null>(null);

  const { scrollYProgress: total } = useScroll({
    target: containerRef,
    offset: ["start end", "end start"],
  });
  const [clickedIndex, setClickedIndex] = useState<number | null>(null);

  const y = useTransform(
    total,
    [0, 0.25, 0.75, 1],
    ["-50%", "0%", "0%", "50%"]
  );

  useMotionValueEvent(total, "change", (latest) => {
    const newIndex = Math.min(
      Math.floor(latest * FAQList.length),
      FAQList.length - 1
    );
    setActiveIndex((prev) => (prev !== newIndex ? newIndex : prev));
  });

  return (
    <Container ref={containerRef}>
      <SignSVGContainer
        isView={true}
        section="parallaxSection"
        $position="absolute"
      />
      <ParallaxImages activeIndex={activeIndex} y={y} />

      {FAQList.map(({ question, answer }, i) => {
        return (
          <MemoContainer key={i}>
            <Memo
              style={{
                pointerEvents: clickedIndex !== i ? "auto" : "none",
              }}
              initial={{ opacity: 0 }}
              animate={{ opacity: clickedIndex !== i ? 1 : 0 }}
              transition={{ duration: 0.3 }}
              onMouseEnter={() => setClickedIndex(i)}
              onMouseLeave={() => setClickedIndex(null)}
              $left={memoConfig[i].left}
              $top={memoConfig[i].top}
            >
              ‚ùìÏßàÎ¨∏ {i + 1} : {question}
            </Memo>
            <Memo
              initial={{ opacity: 0 }}
              animate={{ opacity: clickedIndex === i ? 1 : 0 }}
              transition={{ duration: 0.3 }}
              onMouseEnter={() => setClickedIndex(i)}
              onMouseLeave={() => setClickedIndex(null)}
              $left={memoConfig[i].left}
              $top={memoConfig[i].top}
              style={{
                pointerEvents: clickedIndex === i ? "auto" : "none",
              }}
            >
              üí¨ {answer}
            </Memo>
          </MemoContainer>
        );
      })}
    </Container>
  );
};

export default ParallaxSection;

const Container = styled.section`
  position: relative;
`;

const MemoContainer = styled.section`
  position: relative;
  height: 100vh;
`;
